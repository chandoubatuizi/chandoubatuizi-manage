<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/beans/spring-util-4.0.xsd">


    <!--自定义Realm 实现了登录与授权-->
    <bean id="userRealm" class="cn.chandoubatuizi.manage.core.shiro.relam.UserRealm"/>

    <!--记住我Cookie设置-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie名字-->
        <constructor-arg value="rememberMe"/>
        <!--不允许js访问-->
        <property name="httpOnly" value="true"/>
        <!--30天-->
        <property name="maxAge" value="2592000"/>
    </bean>

    <!--记住我管理器-->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!--加密秘钥，默认AES算法-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('NjFlNTUzODI0YTUwMGFhZQ==')}"/>
        <!--cookie属性-->
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!--shiro-redis的redis管理器-->
    <bean id="redisManager" class="org.crazycake.shiro.RedisManager">
        <property name="host" value="${redis.host}"/>
        <property name="password" value="${redis.password}"/>
    </bean>

    <!--github上redis和shiro的结合，实现了CacheManager-->
    <bean id="redisCacheManager" class="org.crazycake.shiro.RedisCacheManager">
        <property name="redisManager" ref="redisManager"/>
    </bean>

    <!--自定义shiro session监听器-->
    <bean id="shiroSessionListener" class="cn.chandoubatuizi.manage.core.shiro.listener.ShiroSessionListener"/>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="interval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!--用于存放session ID的cookie模板 区别于RememberMe的cookie-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sessionIdCookie"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <!--session持久化 采用redis实现-->
    <bean id="redisSessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
        <property name="redisManager" ref="redisManager"/>
    </bean>

    <!--shiro session管理器-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--全局session超时时间，默认30分钟-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!--是否删除无效的seesion，默认开启-->
        <property name="deleteInvalidSessions" value="true"/>
        <!--session监听-->
        <property name="sessionListeners">
            <list>
                <ref bean="shiroSessionListener"/>
            </list>
        </property>
        <!--如果用户不主动退出是不知道会话是否过期的，因此需要定期检测-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!--会话验证调度器-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!--是否启用cookie模板-->
        <property name="sessionIdCookieEnabled" value="true"/>
        <!--用于存放session ID的cookie模板-->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!--URL后是否有JESSIONID-->
        <property name="sessionIdUrlRewritingEnabled" value="true"/>
        <!--session持久化 采用redis实现-->
        <property name="sessionDAO" ref="redisSessionDAO"/>

    </bean>

    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="cacheManager" ref="redisCacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 静态注入 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--shiro最核心的安全管理器-->
        <property name="securityManager" ref="securityManager"/>
        <!--没有登录的用户请求需要登录的页面时自动跳转到登录页面的地址-->
        <property name="loginUrl" value="/login"/>
        <!--认证成功统一跳转url，不配置shiro认证成功自动跳转到上一个请求路径，若session中不存在则跳转到/ 建议不配置-->
        <property name="successUrl" value=""/>
        <!--无权限的时候跳转的url-->
        <!--这里有个坑：filter是AuthorizationFilter，然后，只有perms，roles，ssl，rest，port才是属于AuthorizationFilter，
        而anon，authcBasic，auchc，user是AuthenticationFilter，所以unauthorizedUrl设置后页面不跳转-->
        <property name="unauthorizedUrl" value=""/>
        <!--自定义过滤器-->
        <property name="filters">
            <util:map>
                <!--TODO-->
            </util:map>
        </property>
        <!--过滤链 包含shiro自带的一些filter-->
        <property name="filterChainDefinitions">
            <value>
                /login = anno
                /html/** = anno
                /js/** = anno
                /css/** = anno
                /static/** = anno
                /logout = logout
                /** = user
            </value>
        </property>
    </bean>

</beans>